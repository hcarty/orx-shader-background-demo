; shader-background-demo - Template basic config file

[Display]
; FullScreen = false + Decoration = false + no dimension -> Borderless FullScreen
Title           = shader-background-demo
FullScreen      = false
Decoration      = false
Smoothing       = true
VSync           = true

[Resource]
Texture         = ../data/texture
Sound           = ../data/sound

[Input]
SetList         = MainInput

[MainInput]
KEY_ESCAPE      = Quit

[MainViewport]
Camera          = MainCamera

[MainCamera]
FrustumWidth    = 1280
FrustumHeight   = 720
FrustumFar      = 2
FrustumNear     = 0
Position        = (0, 0, -1) ; Objects with -1 <= Z <= 1 will be visible
GroupList        = background # default

[Scene]
ChildList       = Object # Sound # Background

[Object]
Graphic         = @
Texture         = logo.png
Pivot           = center
AngularVelocity = 18
FXList          = FadeIn # ColorCycle

[Sound]
SoundList       = @
Sound           = appear.ogg
LifeTime        = sound

[FadeIn]
SlotList        = @
Type            = alpha
Curve           = smooth
StartTime       = 0
EndTime         = 1.5
StartValue      = -1
EndValue        = 0

[ColorCycle]
Loop            = true
SlotList        = @
Type            = hsv
Curve           = linear
Absolute        = true
StartTime       = 0
EndTime         = 6
StartValue      = (0, 1, 1)
EndValue        = (1, 1, 1)

[Background]
Position = (0, 0, 1)
ShaderList = BackgroundShader
Group = background
Graphic = @
Texture = pixel
Scale = 1
ParentCamera = MainCamera
UserParentSpace = both
Pivot = center

[BackgroundShader]
UseCustomParam = true
ParamList = time
time = time
Code = "
//
// Description : Array and textureless GLSL 2D simplex noise function.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
//

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
  return mod289(((x*34.0)+1.0)*x);
}

float snoise(vec2 v)
  {
  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                     -0.577350269189626,  // -1.0 + 2.0 * C.x
                      0.024390243902439); // 1.0 / 41.0
// First corner
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);

// Other corners
  vec2 i1;
  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
  //i1.y = 1.0 - i1.x;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  // x0 = x0 - 0.0 + 0.0 * C.xx ;
  // x1 = x0 - i1 + 1.0 * C.xx ;
  // x2 = x0 - 1.0 + 2.0 * C.xx ;
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;

// Permutations
  i = mod289(i); // Avoid truncation effects in permutation
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
		+ i.x + vec3(0.0, i1.x, 1.0 ));

  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;

// Gradients: 41 points uniformly over a line, mapped onto a diamond.
// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;

// Normalise gradients implicitly by scaling m
// Approximation of: m *= inversesqrt( a0*a0 + h*h );
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

// Compute final noise value at P
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

//
// Everything beyond this point is not from the webgl-noise project
//

const float bgTopR = 22.0 / 255.0;
const float bgTopG = 100.0 / 255.0;
const float bgTopB = 132.0 / 255.0;
const vec3 backgroundTop = vec3(bgTopR, bgTopG, bgTopB);

const float bgBottomR = 150.0 / 255.0;
const float bgBottomG = 50.0 / 255.0;
const float bgBottomB = 100.0 / 255.0;
const vec3 backgroundBottom = vec3(bgBottomR, bgBottomG, bgBottomB);

const float magnitudeCutoff = 0.7;

vec3 background(float y) {
  return mix(backgroundTop, backgroundBottom, y);
}

float magnitude(vec2 p, float time) {
  float slowTime = time / 10;
  vec2 pA = p;
  vec2 pB = p * 2;
  float noiseA = snoise(pA + slowTime);
  float noiseB = snoise(pB + sin(slowTime));

  float magnitude = noiseA + noiseB;
  return min(max(magnitude, 0.0), 2.0);
}

void main() {
  vec2 p = gl_TexCoord[0].xy;
  float mag = magnitude(p / 2, time);

  float yOffset = sin(time);

  vec4 cloudColor = vec4(mag, mag, mag, 1.0);
  vec4 backgroundColor = vec4(background(p.y + yOffset), 1.0);
  if (mag >= magnitudeCutoff) {
    // Clouds
    float step = round(mag * 10) / 10;
    gl_FragColor = mix(backgroundColor, cloudColor, step);
  }
  else {
    // Background
    gl_FragColor = backgroundColor;
  }
}
"
